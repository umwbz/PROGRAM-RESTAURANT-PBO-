import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;


public class Main {
 // Data restaurant
    static List<Restaurant> restaurantList = new ArrayList<>();
 // Data Order  
    private static List<Order> orderList = new ArrayList<>();
    
       class Restaurant {
        private String name;
        private String address;
        private Menu menu;

        public Restaurant(String name, String address, Menu menu) {
            this.name = name;
            this.address = address;
            this.menu = menu;
        }

        public String getName() {
            return name;
        }

        public String getAddress() {
            return address;
        }

        public Menu getMenu() {
            return menu;
        }
    }

    class Menu {
        private Map<String, Double> foods;
        private Map<String, Double> drinks;

        public Menu(Map<String, Double> foods, Map<String, Double> drinks) {
            this.foods = foods;
            this.drinks = drinks;
        }

          // method to add food to the menu
         public void addFood(String name, double price) {
            foods.put(name, price);
        }

        // method to add drink to the menu
        public void addDrink(String name, double price) {
            drinks.put(name, price);
        }
        public Map<String, Double> getFoods() {
            return foods;
        }

        public Map<String, Double> getDrinks() {
            return drinks;
        }
    }
  class Order {
        private int restaurantId;
        private int menuId;
        private int quantity;
        private double distance;
        private double deliveryFee;

        public Order(int restaurantId, int menuId, int quantity, double distance, double deliveryFee) {
            this.restaurantId = restaurantId;
            this.menuId = menuId;
            this.quantity = quantity;
            this.distance = distance;
            this.deliveryFee = deliveryFee;
        }

        public int getRestaurantId() {
            return restaurantId;
        }

        public int getMenuId() {
            return menuId;
        }

        public int getQuantity() {
            return quantity;
        }

        public double getDistance() {
            return distance;
        }

        public double getDeliveryFee() {
            return deliveryFee;
        }
    }

    public static void main(String[] args) {
        // Hardcoded login credential
        String adminUsername = "admin";
        String adminPassword = "admin7";
        
        
         // Main menu
        Scanner scanner = new Scanner(System.in);
        String userInput = "";
        while (!userInput.equals("exit")) {
            System.out.println("Welcome to Restaurant Program!");
            System.out.println("1. Login as admin");
            System.out.println("2. Login as customer");
            System.out.println("exit. Exit program");
            System.out.print("Please enter your choice: ");
            userInput = scanner.nextLine();

            switch (userInput) {
                case "1":
                    // Admin menu
                    System.out.print("Username: ");
                    String adminUsernameInput = scanner.nextLine();
                    System.out.print("Password: ");
                    String adminPasswordInput = scanner.nextLine();

                    if (adminUsernameInput.equals(adminUsername) && adminPasswordInput.equals(adminPassword)) {
                        adminMenu(scanner);
                    } else {
                        System.out.println("Invalid username or password. Please try again.");
                    }
                    break;

                case "2":
                    // Customer menu
                    customerMenu(scanner);
                    break;

                case "exit":
                    System.out.println("Thank you for using Restaurant Program!");
                    break;

                default:
                    System.out.println("Invalid input. Please try again.");
            }
        }
    }

    // Admin menu
    public static void adminMenu(Scanner scanner) {
        String userInput = "";
        while (!userInput.equals("4")) {
            System.out.println("\nAdmin Menu");
            System.out.println("1. View Restaurants");
            System.out.println("2. Add Restaurant");
            System.out.println("3. Delete Restaurant");
            System.out.println("4. Back to Login");
            System.out.print("Please enter your choice: ");
            userInput = scanner.nextLine();

            switch (userInput) {
                case "1":
                    viewRestaurants();
                    break;

                case "2":
                    Main instance = new Main();
                    instance.addRestaurant(scanner);
                    break;

                case "3":
                    deleteRestaurant(scanner);
                    break;

                case "4":
                    System.out.println("Logging out of admin account...");
                    break;

                default:
                    System.out.println("Invalid input. Please try again.");
            }
        }
    }

    // Customer menu
    public static void customerMenu(Scanner scanner) {
        String userInput = "";
        while (!userInput.equals("4")) {
            System.out.println("\nCustomer Menu");
            System.out.println("1. View Restaurants");
            System.out.println("2. Place Order");
            System.out.println("3. View Order History");
            System.out.println("4. Back to Login");
            System.out.print("Please enter your choice: ");
            userInput = scanner.nextLine();

            switch (userInput) {
                case "1":
                    viewRestaurants();
                    break;

                case "2":
                    Main instance = new Main();
                    instance.placeOrder();
                    break;
                case "3":
                    viewOrder();
                    break;
                case "4":
                    System.out.println("Logging out of customer account...");
                    break;

                default:
                    System.out.println("Invalid input. Please try again.");
            }
        }
    }
    public static void viewRestaurants() {
        // Print a list of all restaurants in the system
        System.out.println("List of Restaurants:");
        for (int i = 0; i < restaurantList.size(); i++) {
            Restaurant restaurant = restaurantList.get(i);
            System.out.println((i + 1) + ". " + restaurant.getName() + " - " + restaurant.getAddress());
        }
    }
 public void addRestaurant(Scanner scanner) {
        // Prompt user for restaurant details
        System.out.print("Enter restaurant name: ");
        String name = scanner.nextLine();
        System.out.print("Enter restaurant address: ");
        String address = scanner.nextLine();

        // Create empty menu
          HashMap<String, Double> foods = new HashMap<>();
          HashMap<String, Double> drinks = new HashMap<>();
          Menu menu = new Menu(foods, drinks);
        // Add menu to the restaurant
            boolean addMenu = true;
            while(addMenu) {
                System.out.print("Add food or drink to the menu? (F/D/N): ");
                String choice = scanner.nextLine();
                switch(choice) {
                    case "F":
                        System.out.print("Enter food name: ");
                        String foodName = scanner.nextLine();
                        System.out.print("Enter food price: ");
                        double foodPrice = scanner.nextDouble();
                        scanner.nextLine();
                        menu.addFood(foodName, foodPrice);
                        break;
                    case "D":
                        System.out.print("Enter drink name: ");
                        String drinkName = scanner.nextLine();
                        System.out.print("Enter drink price: ");
                        double drinkPrice = scanner.nextDouble();
                        scanner.nextLine();
                        menu.addDrink(drinkName, drinkPrice);
                        break;
                    case "N":
                        addMenu = false;
                        break;
                    default:
                        System.out.println("Invalid choice!");
                }
            }
        // Create new restaurant object
        Restaurant restaurant = new Restaurant(name, address, menu);

        // Add restaurant to list
        restaurantList.add(restaurant);

        // Confirmation message
        System.out.println("Restaurant added successfully!");
    }


    public static void deleteRestaurant(Scanner scanner) {
        System.out.print("Enter index of restaurant to delete: ");
        int index = Integer.parseInt(scanner.nextLine()) - 1;
        if (index >= 0 && index < restaurantList.size()) {
            restaurantList.remove(index);
            System.out.println("Restaurant deleted.");
        } else {
            System.out.println("Invalid index. Please try again.");
        }
    }

  public  void placeOrder() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Restaurant List");
        viewRestaurants();

        // Prompt user for order details
        System.out.println("Place Order");
        System.out.print("Select a restaurant: ");
        int restaurantIndex = Integer.parseInt(scanner.nextLine()) - 1;
        Restaurant selectedRestaurant = restaurantList.get(restaurantIndex);

        // Display the restaurant's menu
        System.out.println("\n" + selectedRestaurant.getName() + " Menu:");
        Menu menu = selectedRestaurant.getMenu();
        Map<String, Double> foods = menu.getFoods();
        Map<String, Double> drinks = menu.getDrinks();
        System.out.println("Food:");
        int foodIndex = 1;
        for (String foodName : foods.keySet()) {
            double price = foods.get(foodName);
            System.out.println(foodIndex + ". " + foodName + " - Rp " + price);
            foodIndex++;
        }
        System.out.println("Drinks:");
        int drinkIndex = 1;
        for (String drinkName : drinks.keySet()) {
            double price = drinks.get(drinkName);
            System.out.println(drinkIndex + ". " + drinkName + " - Rp " + price);
            drinkIndex++;
        }

        // Ask for user input
        System.out.print("Select a menu item: ");
        int menuIndex = Integer.parseInt(scanner.nextLine()) - 1;
        Map<String, Double> selectedMenu = null;
        if (menuIndex < foodIndex - 1) {
            selectedMenu = foods;
        } else {
            selectedMenu = drinks;
        }
        String[] menuKeys = selectedMenu.keySet().toArray(new String[0]);
        String selectedMenuItem = menuKeys[menuIndex % (foodIndex - 1)];
        Double selectedMenuItemPrice = selectedMenu.get(selectedMenuItem);
        System.out.println("Selected menu item: " + selectedMenuItem + " - Rp " + selectedMenuItemPrice);

        // Ask for user input
        System.out.print("Enter quantity: ");
        int quantity = Integer.parseInt(scanner.nextLine());

        // Ask for user input
        System.out.print("Enter distance (km): ");
        double distance = Double.parseDouble(scanner.nextLine());

        // Calculate delivery fee
        double deliveryFee = Math.max(500, distance * 1000);

        // Create new order object and add it to the orderList
        Order newOrder = new Order(restaurantIndex, menuIndex, quantity, distance, deliveryFee);
        orderList.add(newOrder);

        System.out.println("Order has been placed!");
    }

   public static void viewOrder() {
        // Print a list of all orders made by the customer
        System.out.println("List of Orders:");
        System.out.println("\nOrder History:");

        if (orderList.size() == 0) {
            System.out.println("No order history found.");
            return;
        }

        for (int i = 0; i < orderList.size(); i++) {
            Order order = orderList.get(i);
            Restaurant restaurant = restaurantList.get(order.getRestaurantId());
            Menu menu = restaurant.getMenu();

            // Print order details
            System.out.println("Order #" + (i+1));
            System.out.println("Restaurant: " + restaurant.getName());
            System.out.println("Item: " + getItemName(order.getMenuId(), menu));
            System.out.println("Quantity: " + order.getQuantity());
            System.out.println("Price per item: " + getItemPrice(order.getMenuId(), menu));
            System.out.println("Total price: " + getTotalPrice(order.getQuantity(), getItemPrice(order.getMenuId(), menu)));
            System.out.println("Distance: " + order.getDistance() + " km");
            System.out.println("Delivery fee: " + order.getDeliveryFee());
            System.out.println("Total cost: " + getTotalCost(order.getQuantity(), getItemPrice(order.getMenuId(), menu), order.getDeliveryFee()));
            System.out.println();
        }
    }

    // Helper methods
    private static String getItemName(int menuId, Menu menu) {
        Map<String, Double> foods = menu.getFoods();
        Map<String, Double> drinks = menu.getDrinks();

        if (menuId <= foods.size()) {
            // The menuId refers to a food item
            String[] foodKeys = foods.keySet().toArray(new String[0]);
            return foodKeys[menuId-1];
        } else {
            // The menuId refers to a drink item
            String[] drinkKeys = drinks.keySet().toArray(new String[0]);
            return drinkKeys[menuId-foods.size()-1];
        }
    }

    private static double getItemPrice(int menuId, Menu menu) {
        Map<String, Double> foods = menu.getFoods();
        Map<String, Double> drinks = menu.getDrinks();

        if (menuId <= foods.size()) {
            // The menuId refers to a food item
            String[] foodKeys = foods.keySet().toArray(new String[0]);
            String itemName = foodKeys[menuId-1];
            return foods.get(itemName);
        } else {
            // The menuId refers to a drink item
            String[] drinkKeys = drinks.keySet().toArray(new String[0]);
            String itemName = drinkKeys[menuId-foods.size()-1];
            return drinks.get(itemName);
        }
    }

    private static double getTotalPrice(int quantity, double price) {
        return quantity * price;
    }

    private static double getTotalCost(int quantity, double price, double deliveryFee) {
        return getTotalPrice(quantity, price) + deliveryFee;
    }

}

